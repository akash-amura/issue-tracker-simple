continue
n
continue
n
continue
n
continue
n
continue
BCrypt::Password.new(u.remember_digest)
u = User.first
u = Users.first
User.fire
users.each {|x|  p x if BCrypt::Password.new(x.remember_digest) == remember_token  } 
users.each do |x| 
users.each
users.class
users
n
continue
users
User
n
users
n
remember_token
n
continue
users.each {|x| p x.remember_digest}
users.each do |x|
users.each do |x| 
users = User.all
BCrypt::Password.new(digest) == remember_token
digest = User.find_by(email:'hal.j@gmail.com').remember_digest
remember_token
BCrypt::Password.new(digest)
digest = User.find_by(email:'hal.j@gmail.com').remember_digest
User.find_by(email:'hal.j@gmail.com').remember_digest
User.find_by(email:'hal.j@gmail.com')
User.find_by(email:'hal.j@gmail.com').
users.find_by(email:'hal.j@gmail.com').remember_digest
users.find_by(email:'hal.j@gmail.com')
users.find_by_email('hal.j@gmail.com')
n
continue
n
users
n
cookies.signed[:remember_token]
n
session[:user_id]
continue
n
email
n
continue
remember_token
remeber_token
BCrypt::Password.new(@user.remember_digest) == cookies.signed[:remember_token]
cookies.signed[:remember_token]
cookies.signed[:remember_digest]
BCrypt::Password.new(@user.remember_digest) == cookies.signed[:remember_digest]
BCrypt::Password.new(@user.remember_digest)
@user.remember_digest
@user
cookies.signed[:remember_token]
cookies[:remember_token]
cookies
n
digest
@user
n
@user
BCrypt::Password.create(Bcrypt::Password.create(digest)) == digest
BCrypt::Password.create(digest) == digest
BCrypt::Password.create(digest)
digest
n
email
password
n
email
continue
n
cookies[:remember_token]
cookies
n
@user
n
BCrypt::Password.create(digest)
BCrypt::Password.new(digest)
digest
n
digest
n
user_login_params
params
n
continue
user_login_params
remember
continue
n
continue
n
cookies.signed
digest
@user[:remember_digest]
@user
n
digest
n
password
email
n
params
n
continue
n
s
continue
n
continue
user.errors
user
n
user
n
user
continue
User.first
User
q
n
disp proj
disp local
n
var local
n
continue
q
var local
n
var local
n
continue
n
project_ids
project_ids.pop
project_ids
var local
n
var local
n
q
n
var local
n
continue
n
continue
project_ids
n
project_ids
continue
params[:_method].to_sym
params[:_method]
params
request.method_symbol
continue
n
continue
q
n
@ticket
n
continue
n
continue
n
s
continue
n
@ticket
n
q
continue
params
add_project_params
n
@ticket
n
continue
ticket.projects
ticket
ticket.projects.first.id
n
ticket.projects.first.id
ticket.projects.first
ticket.projects
ticket
continue
q
s
ticket
continue
User.ancestors
User.descendants
SysAdmin
User.descendants
User
User.descendants
User.descendants.map(&:to_s)
User
kUser
continue
n
@user.errors.full_messages
@user.errors
@user
n
continue
n
continue
User.find(session[:user_id])
session[:user_id]
@user
q
n
user_path
@user
n
@user
email
n
q
qq
n
@user
n
@user
n
params
c
n
b 8
q
n
s
n
@user.valid?
@user.valid>
@user
n
q
n
